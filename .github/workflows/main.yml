name: Build Pico Smart Frame

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake gcc-arm-none-eabi build-essential libnewlib-arm-none-eabi git

      - name: Set up Pico SDK
        run: |
          mkdir -p $HOME/pico
          cd $HOME/pico
          if [ ! -d "pico-sdk" ]; then
            git clone -b master https://github.com/raspberrypi/pico-sdk.git
            cd pico-sdk
            git submodule update --init
          fi
          echo "PICO_SDK_PATH=$HOME/pico/pico-sdk" >> $GITHUB_ENV

      - name: Set up Project Files Inline
        run: |
          PROJECT_DIR=$GITHUB_WORKSPACE
          cd $PROJECT_DIR

          # tiny_jpeg.h
          cat > tiny_jpeg.h << 'EOF'
#ifndef TINY_JPEG_H
#define TINY_JPEG_H
#include <stdint.h>
#include <stddef.h>
typedef struct {
    uint8_t *out_buf;
    size_t out_size;
    size_t out_pos;
    uint8_t *in_buf;
    size_t in_width;
    size_t in_height;
    size_t in_stride;
} tiny_jpeg_t;
void tiny_jpeg_init(tiny_jpeg_t *jpeg, uint8_t *out_buf, size_t out_size,
                    uint8_t *in_buf, size_t in_width, size_t in_height,
                    size_t in_stride);
int tiny_jpeg_encode(tiny_jpeg_t *jpeg);
#endif
EOF

          # tiny_jpeg.c
          cat > tiny_jpeg.c << 'EOF'
#include "tiny_jpeg.h"
#define WRITE_BYTE(val) do { if (jpeg->out_pos < jpeg->out_size) jpeg->out_buf[jpeg->out_pos++] = (val); } while (0)
#define WRITE_WORD(val) do { WRITE_BYTE((uint8_t)((val) >> 8)); WRITE_BYTE((uint8_t)(val)); } while (0)
static void write_soi(tiny_jpeg_t *jpeg) { WRITE_BYTE(0xFF); WRITE_BYTE(0xD8); }
static void write_eoi(tiny_jpeg_t *jpeg) { WRITE_BYTE(0xFF); WRITE_BYTE(0xD9); }
static void write_dqt(tiny_jpeg_t *jpeg) { WRITE_BYTE(0xFF); WRITE_BYTE(0xDB); WRITE_WORD(132); WRITE_BYTE(0x00); for(size_t i=0;i<64;i++) WRITE_BYTE(0xFF); WRITE_BYTE(0x01); for(size_t i=0;i<64;i++) WRITE_BYTE(0xFF); }
static void write_dht(tiny_jpeg_t *jpeg) { WRITE_BYTE(0xFF); WRITE_BYTE(0xC4); WRITE_WORD(0x01A2); WRITE_BYTE(0x00); for(size_t i=0;i<16;i++) WRITE_BYTE(0x00); WRITE_BYTE(0x01); for(uint8_t i=0;i<0x3F;i++) WRITE_BYTE(i); }
static void write_sof(tiny_jpeg_t *jpeg) { size_t length=8+3*3; WRITE_BYTE(0xFF); WRITE_BYTE(0xC0); WRITE_WORD(length); WRITE_BYTE(0x08); WRITE_WORD(jpeg->in_height); WRITE_WORD(jpeg->in_width); WRITE_BYTE(0x03); WRITE_BYTE(0x01); WRITE_BYTE(0x11); WRITE_BYTE(0x00); WRITE_BYTE(0x02); WRITE_BYTE(0x11); WRITE_BYTE(0x01); WRITE_BYTE(0x03); WRITE_BYTE(0x11); WRITE_BYTE(0x01); }
void tiny_jpeg_init(tiny_jpeg_t *jpeg, uint8_t *out_buf, size_t out_size, uint8_t *in_buf, size_t in_width, size_t in_height, size_t in_stride) { jpeg->out_buf=out_buf; jpeg->out_size=out_size; jpeg->out_pos=0; jpeg->in_buf=in_buf; jpeg->in_width=in_width; jpeg->in_height=in_height; jpeg->in_stride=in_stride; }
int tiny_jpeg_encode(tiny_jpeg_t *jpeg) { write_soi(jpeg); write_dqt(jpeg); write_dht(jpeg); write_sof(jpeg); write_eoi(jpeg); return 0; }
EOF

          # main.c
          cat > main.c << 'EOF'
#include <stdio.h>
#include <time.h>
#include <string.h>
#include "tiny_jpeg.h"
#include "tusb.h"
#include "pico/stdlib.h"
#define WIDTH 320
#define HEIGHT 240
uint16_t framebuffer[WIDTH*HEIGHT];
uint8_t jpeg_out[65536];
tiny_jpeg_t jpeg_encoder;
#define DISK_SIZE (2*1024*1024)
uint8_t disk_image[DISK_SIZE];
size_t frame_jpg_offset=0x10000;
#define BLOCK_SIZE 512
const uint8_t font5x7[][5]={{0x7E,0x81,0x81,0x81,0x7E},{0x00,0x82,0xFF,0x80,0x00},{0xE2,0x91,0x91,0x91,0x8E},{0x42,0x81,0x89,0x89,0x76},{0x1C,0x12,0x11,0xFF,0x10},{0x4F,0x89,0x89,0x89,0x71},{0x7E,0x89,0x89,0x89,0x72},{0x01,0x01,0xF1,0x09,0x07},{0x76,0x89,0x89,0x89,0x76},{0x4E,0x91,0x91,0x91,0x7E},{0x00,0x24,0x24,0x00,0x00}};
void draw_char(uint16_t *fb,char c,int x0,int y0,uint16_t color){int index;if(c>='0'&&c<='9') index=c-'0'; else if(c==':') index=10; else return; for(int y=0;y<7;y++){ uint8_t row=font5x7[index][y]; for(int x=0;x<5;x++){ if(row&(1<<(7-x))){ int px=x0+x; int py=y0+y; if(px<WIDTH && py<HEIGHT) fb[py*WIDTH+px]=color;}}}}
void render_black_frame(uint16_t *fb){for(int i=0;i<WIDTH*HEIGHT;i++) fb[i]=0x0000;}
void draw_time(uint16_t *fb,int h,int m){ char ts[6]; snprintf(ts,sizeof(ts),"%02d:%02d",h,m); int x=20,y=20; for(int i=0;i<5;i++){ draw_char(fb,ts[i],x,y,0xFFFF); x+=6;}}
void update_frame_jpeg(){ tiny_jpeg_init(&jpeg_encoder,jpeg_out,sizeof(jpeg_out),(uint8_t*)framebuffer,WIDTH,HEIGHT,WIDTH*2); tiny_jpeg_encode(&jpeg_encoder); memcpy(disk_image+frame_jpg_offset,jpeg_out,jpeg_encoder.out_pos); }
int32_t tud_msc_read_cb(uint32_t lba,void* buf,uint32_t sz){ memcpy(buf,disk_image+lba*BLOCK_SIZE,sz); return sz; }
int32_t tud_msc_write_cb(uint32_t lba,const uint8_t* buf,uint32_t sz){ memcpy(disk_image+lba*BLOCK_SIZE,buf,sz); return sz; }
void tud_msc_inquiry_cb(uint8_t lun,uint8_t vid[8],uint8_t pid[16],uint8_t rev[4]){ memcpy(vid,"Pico    ",8); memcpy(pid,"SmartJPEGFrame",16); memcpy(rev,"1.0",4); }
int main(){ stdio_init_all(); tusb_init(); while(1){ tud_task(); time_t t=time(NULL); struct tm tm=*localtime(&t); render_black_frame(framebuffer); draw_time(framebuffer,tm.tm_hour,tm.tm_min); update_frame_jpeg(); sleep_ms(60000);} return 0; }
EOF

          # CMakeLists.txt
          cat > CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.13)
include(pico_sdk_import.cmake)
project(pico_smart_jpeg_display C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
pico_sdk_init()
add_executable(pico_smart_display
    main.c
    tiny_jpeg.c
)
target_include_directories(pico_smart_display PRIVATE ${CMAKE_CURRENT_LIST_DIR})
target_link_libraries(pico_smart_display
    pico_stdlib
    tinyusb_device
    tinyusb_board
)
pico_add_extra_outputs(pico_smart_display)
EOF

      - name: Build Project
        run: |
          mkdir -p build
          cd build
          cmake ..
          make

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pico-smart-frame
          path: build/pico_smart_display.uf2
